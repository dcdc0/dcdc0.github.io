<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2022-02-26T20:57:38-08:00</updated><id>/feed.xml</id><title type="html">Daniel’s website</title><subtitle>This is a website for describing personal projects.</subtitle><entry><title type="html">Creating This Page</title><link href="/first/2022/02/26/steps-to-create.html" rel="alternate" type="text/html" title="Creating This Page" /><published>2022-02-26T14:32:27-08:00</published><updated>2022-02-26T14:32:27-08:00</updated><id>/first/2022/02/26/steps-to-create</id><content type="html" xml:base="/first/2022/02/26/steps-to-create.html"><![CDATA[<p>This is the first post to the website.
I’m going to explain the steps that I took to create this website.</p>

<p>The code used to generate this website is available on <a href="https://github.com/dcdc0/dcdc0.github.io">my github page</a>. It was written in markdown, built with <a href="https://jekyllrb.com/">jekyll</a>, and hosted on <a href="https://github.io">github</a>.</p>

<h1 id="github-setup">Github setup</h1>

<ol>
  <li>First, you’ll need a github account. If you don’t have one, create one. Make sure to keep track of your username and email.</li>
  <li>Create a new repository. Name the repo <code class="language-plaintext highlighter-rouge">username.github.io</code>, replacing <code class="language-plaintext highlighter-rouge">username</code> with your username.</li>
  <li>
    <p>Go to your github settings page and select the tab “SSH and GPG keys”. To be able to make “push” changes to this repository from your local machine (using the command line) you’ll need to generate an ssh key. If you’ve previously created an ssh key, you can use that one. Otherwise, run the command and click enter to select the defaults.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen -t ed25519 -C "your_email@example.com"
</code></pre></div>    </div>
  </li>
  <li>
    <p>Run the commands (from your home directory).</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_ed25519
</code></pre></div>    </div>
  </li>
  <li>Run the command `cat ~/.ssh/id_ed25519.pub and copy the output. On github, add a new ssh key by clicking the button and pasting the output from the previous command.</li>
  <li>
    <p>Now, working in a convenient directory of your choosing, run the command</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com
</code></pre></div>    </div>
  </li>
  <li>Enter that directory. Create a text file named <code class="language-plaintext highlighter-rouge">index.html</code> and give it the contents ‘Hello, World.’</li>
  <li>
    <p>You’ve now made a tiny website. To check it out, you’ll need to push the changes to github. To do this, we’ll first need to configure git to use your ssh key. To do so, run</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> git remote set-url origin git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git
</code></pre></div>    </div>
  </li>
  <li>
    <p>Now, we need to tell git that you want to publish the work you’ve done. First, tell git to track the file with the command</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add index.html
</code></pre></div>    </div>

    <p>then tell git that you’re ready to publish with the command</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git commit -am "Initial commit."
</code></pre></div>    </div>
  </li>
  <li>
    <p>Now, you can push your changes with the command</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push
</code></pre></div>    </div>
  </li>
  <li>Now, go to <code class="language-plaintext highlighter-rouge">username.github.io</code> and see your first webpage.</li>
</ol>]]></content><author><name></name></author><category term="first" /><summary type="html"><![CDATA[This is the first post to the website. I’m going to explain the steps that I took to create this website. The code used to generate this website is available on my github page. It was written in markdown, built with jekyll, and hosted on github. Github setup First, you’ll need a github account. If you don’t have one, create one. Make sure to keep track of your username and email. Create a new repository. Name the repo username.github.io, replacing username with your username. Go to your github settings page and select the tab “SSH and GPG keys”. To be able to make “push” changes to this repository from your local machine (using the command line) you’ll need to generate an ssh key. If you’ve previously created an ssh key, you can use that one. Otherwise, run the command and click enter to select the defaults. ssh-keygen -t ed25519 -C "your_email@example.com" Run the commands (from your home directory). eval "$(ssh-agent -s)" ssh-add ~/.ssh/id_ed25519 Run the command `cat ~/.ssh/id_ed25519.pub and copy the output. On github, add a new ssh key by clicking the button and pasting the output from the previous command. Now, working in a convenient directory of your choosing, run the command git clone https://github.com Enter that directory. Create a text file named index.html and give it the contents ‘Hello, World.’ You’ve now made a tiny website. To check it out, you’ll need to push the changes to github. To do this, we’ll first need to configure git to use your ssh key. To do so, run git remote set-url origin git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git Now, we need to tell git that you want to publish the work you’ve done. First, tell git to track the file with the command git add index.html then tell git that you’re ready to publish with the command git commit -am "Initial commit." Now, you can push your changes with the command git push Now, go to username.github.io and see your first webpage.]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="/jekyll/update/2022/02/26/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2022-02-26T14:03:27-08:00</published><updated>2022-02-26T14:03:27-08:00</updated><id>/jekyll/update/2022/02/26/welcome-to-jekyll</id><content type="html" xml:base="/jekyll/update/2022/02/26/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated. Jekyll requires blog post files to be named according to the following format: YEAR-MONTH-DAY-title.MARKUP Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works. Jekyll also offers powerful support for code snippets: def print_hi(name) puts "Hi, #{name}" end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT. Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.]]></summary></entry></feed>